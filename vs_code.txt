Using
Python
Environments
Visual
Studio
Code
Skip
content
Visual
Studio
Code
Docs
Updates
Blog
API
Extensions
FAQ
Learn
Search
Download
VS
Code
Day
2024
Register
full
day
community
learning
all
things
Visual
Studio
Code
April
24
2024
10:00am
4:00pm
PT
Dismiss
update
Overview
Setup
Overview
Linux
macOS
Windows
Raspberry
Pi
Network
Additional
Components
Enterprise
Uninstall
Get
Started
Intro
Videos
Tips
Tricks
User
Interface
Themes
Settings
Key
Bindings
Display
Language
Telemetry
User
Guide
Basic
Editing
Extension
Marketplace
IntelliSense
Code
Navigation
Refactoring
Debugging
VS
Code
Web
Tasks
Profiles
Settings
Sync
Snippets
Emmet
Command
Line
Interface
Workspace
Trust
Multi-root
Workspaces
Accessibility
Voice
interactions
Custom
Layout
Port
Forwarding
Source
Control
Overview
Introduction
Git
Collaborate
GitHub
FAQ
Terminal
Terminal
Basics
Terminal
Profiles
Shell
Integration
Appearance
Advanced
GitHub
Copilot
Overview
Setup
Getting
Started
Tutorial
Copilot
Chat
Tutorial
Code
Completions
Copilot
Chat
Best
Practices
Workspace
Context
FAQ
Languages
Overview
JavaScript
JSON
HTML
CSS
SCSS
Less
TypeScript
Markdown
PowerShell
C
Java
PHP
Python
Julia
R
Ruby
Rust
Go
T-SQL
C
NET
Polyglot
Node.js
JavaScript
Working
JavaScript
Node.js
Tutorial
Node.js
Debugging
Deploy
Node.js
Apps
Browser
Debugging
Angular
Tutorial
React
Tutorial
Vue
Tutorial
Debugging
Recipes
Performance
Profiling
Extensions
TypeScript
Tutorial
Compiling
Editing
Refactoring
Debugging
Python
Quick
Start
Tutorial
Editing
Code
Linting
Formatting
Debugging
Environments
Testing
Python
Interactive
Django
Tutorial
FastAPI
Tutorial
Flask
Tutorial
Create
containers
Deploy
Python
Apps
Python
Web
Settings
Reference
Java
Getting
Started
Navigate
Edit
Refactoring
Formatting
Linting
Project
Management
Build
Tools
Run
Debug
Testing
Spring
Boot
Application
Servers
Deploy
Java
Apps
GUI
Applications
Extensions
FAQ
C
Intro
Videos
GCC
Linux
GCC
Windows
GCC
Windows
Subsystem
Linux
Clang
macOS
Microsoft
C
Windows
Build
CMake
CMake
Tools
Linux
Editing
Navigating
Debugging
Refactoring
Configure
debugging
Settings
Configure
IntelliSense
Configure
IntelliSense
cross-compiling
FAQ
C
Intro
Videos
Get
Started
Navigate
Edit
IntelliCode
Refactoring
Formatting
Linting
Project
Management
Build
Tools
Package
Management
Run
Debug
Testing
FAQ
Docker
Overview
Node.js
Python
ASP.NET
Core
Debug
Docker
Compose
Registries
Deploy
Azure
Choose
dev
environment
Customize
Develop
Kubernetes
Tips
Tricks
Data
Science
Overview
Jupyter
Notebooks
Data
Science
Tutorial
Python
Interactive
Data
Wrangler
Quick
Start
Data
Wrangler
PyTorch
Support
Azure
Machine
Learning
Manage
Jupyter
Kernels
Jupyter
Notebooks
web
Azure
Extensions
Deployment
Remote
Debugging
Node.js
Docker
MongoDB
Kubernetes
Azure
Kubernetes
Service
Remote
Overview
SSH
Dev
Containers
Windows
Subsystem
Linux
GitHub
Codespaces
VS
Code
Server
Tunnels
SSH
Tutorial
WSL
Tutorial
Tips
Tricks
FAQ
Dev
Containers
Overview
Tutorial
Attach
Container
Create
Dev
Container
Advanced
Containers
devcontainer.json
Dev
Container
CLI
Tips
Tricks
FAQ
Topics
Overview
Overview
Linux
macOS
Windows
Raspberry
Pi
Network
Additional
Components
Enterprise
Uninstall
Intro
Videos
Tips
Tricks
User
Interface
Themes
Settings
Key
Bindings
Display
Language
Telemetry
Basic
Editing
Extension
Marketplace
IntelliSense
Code
Navigation
Refactoring
Debugging
VS
Code
Web
Tasks
Profiles
Settings
Sync
Snippets
Emmet
Command
Line
Interface
Workspace
Trust
Multi-root
Workspaces
Accessibility
Voice
interactions
Custom
Layout
Port
Forwarding
Overview
Introduction
Git
Collaborate
GitHub
FAQ
Terminal
Basics
Terminal
Profiles
Shell
Integration
Appearance
Advanced
Overview
Setup
Getting
Started
Tutorial
Copilot
Chat
Tutorial
Code
Completions
Copilot
Chat
Best
Practices
Workspace
Context
FAQ
Overview
JavaScript
JSON
HTML
CSS
SCSS
Less
TypeScript
Markdown
PowerShell
C
Java
PHP
Python
Julia
R
Ruby
Rust
Go
T-SQL
C
NET
Polyglot
Working
JavaScript
Node.js
Tutorial
Node.js
Debugging
Deploy
Node.js
Apps
Browser
Debugging
Angular
Tutorial
React
Tutorial
Vue
Tutorial
Debugging
Recipes
Performance
Profiling
Extensions
Tutorial
Compiling
Editing
Refactoring
Debugging
Quick
Start
Tutorial
Editing
Code
Linting
Formatting
Debugging
Environments
Testing
Python
Interactive
Django
Tutorial
FastAPI
Tutorial
Flask
Tutorial
Create
containers
Deploy
Python
Apps
Python
Web
Settings
Reference
Getting
Started
Navigate
Edit
Refactoring
Formatting
Linting
Project
Management
Build
Tools
Run
Debug
Testing
Spring
Boot
Application
Servers
Deploy
Java
Apps
GUI
Applications
Extensions
FAQ
Intro
Videos
GCC
Linux
GCC
Windows
GCC
Windows
Subsystem
Linux
Clang
macOS
Microsoft
C
Windows
Build
CMake
CMake
Tools
Linux
Editing
Navigating
Debugging
Refactoring
Configure
debugging
Settings
Configure
IntelliSense
Configure
IntelliSense
cross-compiling
FAQ
Intro
Videos
Get
Started
Navigate
Edit
IntelliCode
Refactoring
Formatting
Linting
Project
Management
Build
Tools
Package
Management
Run
Debug
Testing
FAQ
Overview
Node.js
Python
ASP.NET
Core
Debug
Docker
Compose
Registries
Deploy
Azure
Choose
dev
environment
Customize
Develop
Kubernetes
Tips
Tricks
Overview
Jupyter
Notebooks
Data
Science
Tutorial
Python
Interactive
Data
Wrangler
Quick
Start
Data
Wrangler
PyTorch
Support
Azure
Machine
Learning
Manage
Jupyter
Kernels
Jupyter
Notebooks
web
Extensions
Deployment
Remote
Debugging
Node.js
Docker
MongoDB
Kubernetes
Azure
Kubernetes
Service
Overview
SSH
Dev
Containers
Windows
Subsystem
Linux
GitHub
Codespaces
VS
Code
Server
Tunnels
SSH
Tutorial
WSL
Tutorial
Tips
Tricks
FAQ
Overview
Tutorial
Attach
Container
Create
Dev
Container
Advanced
Containers
devcontainer.json
Dev
Container
CLI
Tips
Tricks
FAQ
In
article
Types
Python
environments
Creating
environments
Working
Python
interpreters
Environment
variables
Next
steps
More
Python
resources
Edit
Python
environments
VS
Code
An
environment
Python
context
Python
program
runs
consists
interpreter
number
installed
packages
Note
If
'd
like
become
familiar
Python
programming
language
review
More
Python
resources
Types
Python
environments
Global
environments
By
default
Python
interpreter
installed
runs
its
global
environment
For
example
run
python
python3
py
new
terminal
depending
installed
Python
're
running
interpreter
's
global
environment
Any
packages
install
uninstall
affect
global
environment
all
programs
run
within
Tip
In
Python
best
practice
create
workspace-specific
environment
example
using
local
environment
Local
environments
There
two
types
environments
create
workspace
virtual
conda
These
environments
allow
install
packages
without
affecting
environments
isolating
workspace
's
package
installations
Virtual
environments
A
virtual
environment
built-in
way
create
environment
A
virtual
environment
creates
folder
contains
copy
symlink
specific
interpreter
When
install
packages
virtual
environment
end
new
folder
thus
isolated
other
packages
used
other
workspaces
Note
While
's
possible
open
virtual
environment
folder
workspace
recommended
might
cause
issues
using
Python
extension
Conda
environments
A
conda
environment
Python
environment
's
managed
using
conda
package
manager
see
Getting
started
conda
Choosing
conda
virtual
environments
depends
packaging
needs
team
standards
etc
Python
environment
tools
The
following
table
lists
various
tools
involved
Python
environments
Tool
Definition
Purpose
pip
The
Python
package
manager
installs
updates
packages
It
's
installed
Python
3.9
default
unless
Debian-based
OS
install
python3-pip
case
venv
Allows
manage
separate
package
installations
different
projects
installed
Python
3
default
unless
Debian-based
OS
install
python3-venv
case
conda
Installed
Miniconda
It
used
manage
packages
virtual
environments
Generally
used
data
science
projects
Creating
environments
Using
Create
Environment
command
To
create
local
environments
VS
Code
using
virtual
environments
Anaconda
follow
steps
open
Command
Palette
⇧⌘P
Windows
Linux
Ctrl+Shift+P
search
Python
Create
Environment
command
select
The
command
presents
list
environment
types
Venv
Conda
If
creating
environment
using
Venv
command
presents
list
interpreters
used
base
new
virtual
environment
If
creating
environment
using
Conda
command
presents
list
Python
versions
used
project
After
selecting
desired
interpreter
Python
version
notification
show
progress
environment
creation
environment
folder
appear
workspace
Note
The
command
also
install
necessary
packages
outlined
requirements/dependencies
file
requirements.txt
pyproject.toml
environment.yml
located
project
folder
It
also
add
gitignore
file
virtual
environment
help
prevent
accidentally
committing
virtual
environment
source
control
Create
virtual
environment
terminal
If
choose
create
virtual
environment
manually
use
following
command
venv
name
environment
folder
macOS/Linux
You
may
need
run
sudo
apt-get
install
python3-venv
first
Debian-based
OSs
python3
venv
venv
Windows
You
also
use
py
3
venv
venv
python
venv
venv
Note
To
learn
venv
module
read
Creation
virtual
environments
Python.org
When
create
new
virtual
environment
prompt
displayed
VS
Code
allow
select
workspace
Tip
Make
sure
update
source
control
settings
prevent
accidentally
committing
virtual
environment
example
gitignore
Since
virtual
environments
portable
typically
not
make
sense
commit
others
use
Create
conda
environment
terminal
The
Python
extension
automatically
detects
existing
conda
environments
We
recommend
install
Python
interpreter
conda
environment
otherwise
one
installed
select
environment
For
example
following
command
creates
conda
environment
named
env-01
Python
3.9
interpreter
several
libraries
conda
create
n
env-01
python=3.9
scipy=0.15.0
numpy
Note
For
information
conda
command
line
read
Conda
environments
Additional
notes
If
create
new
conda
environment
VS
Code
running
use
refresh
icon
top
right
Python
Select
Interpreter
window
otherwise
may
not
find
environment
To
ensure
environment
properly
set
shell
perspective
use
Anaconda
prompt
activate
desired
environment
Then
launch
VS
Code
entering
code
command
Once
VS
Code
open
select
interpreter
either
using
Command
Palette
clicking
status
bar
Although
Python
extension
VS
Code
n't
currently
direct
integration
conda
environment.yml
files
VS
Code
great
YAML
editor
Conda
environments
ca
n't
automatically
activated
VS
Code
Integrated
Terminal
default
shell
set
PowerShell
To
change
shell
see
Integrated
terminal
Terminal
profiles
You
manually
specify
path
conda
executable
use
activation
version
4.4
To
open
Command
Palette
⇧⌘P
Windows
Linux
Ctrl+Shift+P
run
Preferences
Open
User
Settings
Then
set
python.condaPath
Python
extension
section
User
Settings
appropriate
path
Working
Python
interpreters
Select
activate
environment
The
Python
extension
tries
find
select
deems
best
environment
workspace
If
would
prefer
select
specific
environment
use
Python
Select
Interpreter
command
Command
Palette
⇧⌘P
Windows
Linux
Ctrl+Shift+P
Note
If
Python
extension
n't
find
interpreter
issues
warning
On
macOS
12.2
older
extension
also
issues
warning
're
using
OS-installed
Python
interpreter
known
compatibility
issues
In
either
case
disable
warnings
setting
python.disableInstallationCheck
true
your
user
settings
The
Python
Select
Interpreter
command
displays
list
available
global
environments
conda
environments
virtual
environments
See
Where
extension
looks
environments
section
details
including
distinctions
types
environments
The
following
image
example
shows
several
Anaconda
CPython
installations
along
conda
environment
virtual
environment
env
's
located
within
workspace
folder
Note
On
Windows
take
little
time
VS
Code
detect
available
conda
environments
During
process
may
see
cached
path
environment
The
label
indicates
VS
Code
presently
working
cached
information
environment
If
folder
a
workspace
open
VS
Code
select
interpreter
list
Python
extension
store
information
internally
This
ensures
interpreter
used
reopen
workspace
The
selected
environment
used
Python
extension
running
Python
code
using
Python
Run
Python
File
Terminal
command
providing
language
services
auto-complete
syntax
checking
linting
formatting
etc
have
a
py
file
open
editor
opening
a
terminal
Terminal
Create
New
Terminal
command
In
latter
case
VS
Code
automatically
activates
selected
environment
Tip
To
prevent
automatic
activation
a
selected
environment
add
python.terminal.activateEnvironment
false
your
settings.json
file
be
placed
anywhere
a
sibling
existing
settings
Tip
If
activate
command
generates
the
message
Activate.ps1
not
digitally
signed
You
not
run
script
the
current
system
need
temporarily
change
the
PowerShell
execution
policy
allow
scripts
run
see
About
Execution
Policies
the
PowerShell
documentation
Set-ExecutionPolicy
ExecutionPolicy
RemoteSigned
Scope
Process
Note
By
default
VS
Code
uses
the
interpreter
selected
your
workspace
debugging
code
You
override
behavior
specifying
a
different
path
the
python
property
a
debug
configuration
See
Choose
a
debugging
environment
The
selected
interpreter
version
show
the
right
side
the
Status
Bar
The
Status
Bar
also
reflects
no
interpreter
selected
In
either
case
clicking
area
the
Status
Bar
a
convenient
shortcut
the
Python
Select
Interpreter
command
Tip
If
have
problems
VS
Code
recognizing
a
virtual
environment
please
file
issue
so
we
can
help
determine
the
cause
Manually
specify
interpreter
If
VS
Code
n't
automatically
locate
interpreter
want
use
can
browse
the
interpreter
your
file
system
provide
the
path
it
manually
You
can
so
running
the
Python
Select
Interpreter
command
select
the
Enter
interpreter
path
option
shows
the
top
the
interpreters
list
You
can
either
enter
the
full
path
the
Python
interpreter
directly
the
text
box
example
venv/Scripts/python.exe
you
can
select
the
Find
button
browse
your
file
system
find
the
python
executable
you
wish
select
If
you
want
manually
specify
a
default
interpreter
be
used
you
first
open
your
workspace
you
can
create
modify
entry
the
python.defaultInterpreterPath
setting
Note
Changes
the
python.defaultInterpreterPath
setting
not
picked
after
interpreter
already
selected
a
workspace
changes
the
setting
be
ignored
initial
interpreter
selected
the
workspace
Additionally
you
'd
like
set
a
default
interpreter
all
your
Python
applications
you
can
add
entry
python.defaultInterpreterPath
manually
inside
your
User
Settings
To
do
so
open
the
Command
Palette
⇧⌘P
Windows
Linux
Ctrl+Shift+P
enter
Preferences
Open
User
Settings
Then
set
python.defaultInterpreterPath
the
Python
extension
section
User
Settings
the
appropriate
interpreter
How
the
extension
chooses
environment
automatically
If
interpreter
n't
specified
the
Python
extension
automatically
selects
the
interpreter
the
highest
version
the
following
priority
order
Virtual
environments
located
directly
the
workspace
folder
Virtual
environments
related
the
workspace
stored
globally
For
example
Pipenv
Poetry
environments
located
outside
the
workspace
folder
Globally
installed
interpreters
For
example
the
ones
found
usr/local/bin
C
python38
etc
Note
The
interpreter
selected
may
differ
what
python
refers
your
terminal
If
Visual
Studio
Code
n't
locate
your
interpreter
automatically
you
can
manually
specify
interpreter
Where
the
extension
looks
environments
The
extension
automatically
looks
interpreters
the
following
locations
no
particular
order
Standard
install
paths
usr/local/bin
usr/sbin
sbin
c
python36
etc
Virtual
environments
located
directly
the
workspace
project
folder
Virtual
environments
located
the
folder
identified
the
python.venvPath
setting
see
General
Python
settings
can
contain
multiple
virtual
environments
The
extension
looks
virtual
environments
the
first-level
subfolders
venvPath
Virtual
environments
located
a
virtualenvs
folder
virtualenvwrapper
Interpreters
created
pyenv
Pipenv
Poetry
Virtual
environments
located
the
path
identified
WORKON_HOME
used
virtualenvwrapper
Conda
environments
found
conda
env
list
Conda
environments
which
do
not
have
interpreter
have
one
installed
them
upon
selection
Interpreters
installed
a
direnv
folder
direnv
the
workspace
folder
Environments
Terminal
windows
After
using
Python
Select
Interpreter
interpreter
applied
right-clicking
a
file
selecting
Python
Run
Python
File
Terminal
The
environment
also
activated
automatically
you
use
the
Terminal
Create
New
Terminal
command
unless
you
change
the
python.terminal.activateEnvironment
setting
false
Please
note
launching
VS
Code
from
a
shell
which
a
specific
Python
environment
activated
n't
automatically
activate
environment
the
default
Integrated
Terminal
Note
conda
environments
can
not
be
automatically
activated
the
integrated
terminal
PowerShell
set
the
integrated
shell
See
Integrated
terminal
Terminal
profiles
change
the
shell
Changing
interpreters
the
Python
Select
Interpreter
command
n't
affect
terminal
panels
already
open
Thus
you
can
activate
separate
environments
a
split
terminal
select
the
first
interpreter
create
a
terminal
it
select
a
different
interpreter
use
the
split
button
⌘
Windows
Linux
Ctrl+Shift+5
the
terminal
title
bar
Choose
a
debugging
environment
By
default
the
debugger
use
the
Python
interpreter
chosen
the
Python
extension
However
a
python
property
specified
the
debug
configuration
launch.json
it
takes
precedence
If
property
not
defined
it
will
fall
back
using
the
Python
interpreter
path
selected
the
workspace
For
details
debug
configuration
see
Debugging
configurations
Environment
variables
Environment
variable
definitions
file
An
environment
variable
definitions
file
is
a
text
file
containing
key-value
pairs
the
form
environment_variable=value
used
comments
Multiline
values
n't
supported
references
previously
defined
environment
variables
are
allowed
Environment
variable
definitions
files
can
be
used
scenarios
debugging
tool
execution
including
linters
formatters
IntelliSense
testing
tools
are
n't
applied
the
terminal
Note
Environment
variable
definitions
files
are
not
necessarily
cross-platform
For
instance
Unix
uses
a
path
separator
environment
variables
Windows
uses
There
is
no
normalization
operating
system
differences
so
you
need
make
sure
environment
definitions
file
use
values
are
compatible
your
operating
system
By
default
the
Python
extension
looks
loads
a
file
named
env
the
current
workspace
folder
applies
definitions
The
file
is
identified
the
default
entry
python.envFile
workspaceFolder
env
your
user
settings
see
General
Python
settings
You
can
change
the
python.envFile
setting
any
time
use
a
different
definitions
file
Note
Environment
variable
definitions
files
are
not
used
all
situations
environment
variables
are
available
use
Unless
Visual
Studio
Code
documentation
states
otherwise
these
only
affect
certain
scenarios
as
per
definition
For
example
the
extension
n't
use
environment
variable
definitions
files
resolving
setting
values
A
debug
configuration
also
contains
an
envFile
property
also
defaults
the
env
file
the
current
workspace
see
Debugging
Set
configuration
options
This
property
allows
you
easily
set
variables
debugging
purposes
replace
variables
specified
the
default
env
file
For
example
developing
a
web
application
you
might
want
to
easily
switch
development
production
servers
Instead
coding
the
different
URLs
other
settings
your
application
directly
you
could
use
separate
definitions
files
each
For
example
dev.env
file
dev.env
development
configuration
API
endpoint
MYPROJECT_APIENDPOINT=https
my.domain.com/api/dev
Variables
the
database
MYPROJECT_DBURL=https
my.domain.com/db/dev
MYPROJECT_DBUSER=devadmin
MYPROJECT_DBPASSWORD
dfka
213
prod.env
file
prod.env
production
configuration
API
endpoint
MYPROJECT_APIENDPOINT=https
my.domain.com/api
Variables
for
the
database
MYPROJECT_DBURL=https
my.domain.com/db
MYPROJECT_DBUSER=coreuser
MYPROJECT_DBPASSWORD=kKKfa98
11
You
can
then
set
the
python.envFile
setting
to
workspaceFolder
prod.env
then
set
the
envFile
property
the
debug
configuration
to
workspaceFolder
dev.env
Note
When
environment
variables
are
specified
using
multiple
methods
be
aware
there
is
an
order
precedence
All
env
variables
defined
the
launch.json
file
will
override
variables
contained
the
env
file
specified
by
the
python.envFile
setting
user
workspace
Similarly
env
variables
defined
the
launch.json
file
will
override
the
environment
variables
defined
the
envFile
that
are
specified
launch.json
Use
the
PYTHONPATH
variable
The
PYTHONPATH
environment
variable
specifies
additional
locations
the
Python
interpreter
look
for
modules
In
VS
Code
PYTHONPATH
can
be
set
the
terminal
settings
terminal.integrated.env
and/or
within
an
env
file
When
the
terminal
settings
are
used
PYTHONPATH
affects
any
tools
that
are
run
within
the
terminal
by
a
user
as
well
as
any
action
the
extension
performs
for
a
user
that
is
routed
the
terminal
as
debugging
However
case
the
extension
is
performing
an
action
that
is
n't
routed
the
terminal
such
as
the
use
a
linter
formatter
then
setting
wo
n't
have
an
effect
module
look-up
Next
steps
Editing
code
Learn
about
autocomplete
IntelliSense
formatting
refactoring
for
Python
Debugging
Learn
to
debug
Python
locally
remotely
Testing
Configure
test
environments
discover
run
debug
tests
Settings
reference
Explore
the
full
range
Python-related
settings
VS
Code
More
Python
resources
Getting
Started
Python
in
VS
Code
Learn
how
to
edit
run
debug
code
in
VS
Code
Virtual
Environments
Packages
Python.org
Learn
about
virtual
environments
and
packages
Installing
Python
Modules
Python.org
Learn
how
to
install
Python
modules
Python
tutorial
Python.org
Learn
about
the
Python
language
6/12/2023
In
this
article
there
are
6
sectionsIn
this
article
Types
Python
environments
Creating
environments
Working
Python
interpreters
Environment
variables
Next
steps
More
Python
resources
Hello
from
Seattle
Follow
code
Support
Privacy
Manage
Cookies
Terms
Use
License
©
2024
Microsoft
